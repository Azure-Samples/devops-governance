# Build numbering format
name: $(BuildID)

pool:
  vmImage: 'ubuntu-18.04'

trigger: none

pr:
- release

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    always: true
    branches:
      include:
      - release

variables:
  - group: e2e-gov-demo-kv

stages:

# Stage: Terraform Plan
# ---------------------
- stage: TFPlanStage
  displayName: Detect Drift
  jobs:
  - job: DetectDriftJob
    displayName: Terraform Plan
    steps:

    # Step - terraform init
    - bash: |
        terraform init \
          -backend-config="storage_account_name=$TF_STATE_BLOB_ACCOUNT_NAME" \
          -backend-config="container_name=$TF_STATE_BLOB_CONTAINER_NAME" \
          -backend-config="key=$TF_STATE_BLOB_FILE" \
          -backend-config="sas_token=$TF_STATE_BLOB_SAS_TOKEN"
      displayName: Terraform - Init
      env:
        TF_STATE_BLOB_ACCOUNT_NAME:   $(kv-tf-state-blob-account)
        TF_STATE_BLOB_CONTAINER_NAME: $(kv-tf-state-blob-container)
        TF_STATE_BLOB_FILE:           $(kv-tf-state-blob-file)
        TF_STATE_BLOB_SAS_TOKEN:      $(kv-tf-state-sas-token)

    # Step - terraform plan
    - bash: |
        # Remember Exit Code
        set -uo pipefail

        # Run `terraform plan` and save output (used later for posting to GitHub)
        export STRANGE=$( terraform plan -detailed-exitcode -var superadmins_aad_object_id=$AAD_SUPERADMINS_GROUP_ID | tee pipeline-output.txt; exit ${PIPESTATUS[0]} )

        echo $?
        echo "---"
        echo $STRANGE

        # Save Exit Code from first command before pipe
        # try index 1 (but should be zero?)
        echo "============== Debug Pipeline =============="
        echo "All pipestatus(s):"
        echo "${PIPESTATUS[@]}"

        # export TF_PLAN_EXIT_CODE=${PIPESTATUS[1]}
        # echo "What is pipestatus (expect '2')? $TF_PLAN_EXIT_CODE"
        # if [[ "$TF_PLAN_EXIT_CODE" == "0" ]]; then
        #   echo "üü¢ No configuration drift detected"
        #   echo "##vso[task.setvariable variable=exitCode;isOutput=true]zero"
        #   exit 0
        # else
        #   echo "‚ö†Ô∏è  Configuration drift detected"
        #   echo "##vso[task.setvariable variable=exitCode;isOutput=true]non-zero"
        #   exit 1
        # fi
      displayName: Terraform - Detect configuration drift
      name: planStep
      env:
        ARM_SUBSCRIPTION_ID:        $(kv-arm-subscription-id)
        ARM_CLIENT_ID:              $(kv-arm-client-id)
        ARM_CLIENT_SECRET:          $(kv-arm-client-secret)
        ARM_TENANT_ID:              $(kv-arm-tenant-id)
        AZDO_ORG_SERVICE_URL:       $(kv-azure-devops-org-url)
        AZDO_PERSONAL_ACCESS_TOKEN: $(kv-azure-devops-pat)
        AAD_SUPERADMINS_GROUP_ID:   $(kv-aad-superadmins-group-id)

    # Doesn't work
    # - bash: echo got exit code - $(exitCode)
    #   displayName: debug exit code

    # # Multiline variables are not supported in Azure DevOps üòï
    # - bash: |
    #     echo "##vso[task.setvariable variable=tfPlanOutput]$(cat ./plan-output.txt)"
    #   displayName: Save terraform plan output

    # # works, but not useful because distinct step
    # - bash: echo "##vso[task.setvariable variable=has_drift;isOutput=true]false"
    #   condition: succeeded()
    #   displayName: set has_drift to false

    # # works, but not useful because distinct step
    # - bash: echo "##vso[task.setvariable variable=has_drift;isOutput=true]true"
    #   condition: failed()
    #   displayName: set has_drift to true



# Stage: Pull Request Comment
# ---------------------------
- stage: PRCommentStage
  displayName: Pull Request Comment
  condition: and(succeededOrFailed(), eq(variables['Build.Reason'], 'PullRequest'))
  variables:
    github-repo-name:       Azure-Samples/devops-governance
    github-connection-name: Azure-Samples
    ado-org-name:           julie-msft
    ado-project-name:       e2e-governance-demo
    exit-code:              $[ stageDependencies.TFPlanStage.DetectDriftJob.outputs['planStep.exitCode'] ]
  jobs:
  - job: TestOutput
    steps:
    # Does not work
    # - bash: echo what is $[ variables['exit-code'] ] ?
    #   displayName: echo exit code

    - bash: echo "all good"
      condition: eq(variables['exit-code'], 'zero')
      displayName: no drift

    - bash: echo "not working"
      condition: eq(variables['exit-code'], 'non-zero')
      displayName: got drift

  # - job: PostCommentJob
  #   displayName: Post to GitHub
  #   steps:
  #   - task: GitHubComment@0
  #     condition: eq(variables['has-drift'], false)
  #     displayName: Post - No Drift
  #     inputs:
  #       gitHubConnection: ${{ variables['github-connection-name'] }}
  #       repositoryName: $(github-repo-name)
  #       comment: |
  #         üü¢ No configuration drift detected

  #   - task: GitHubComment@0
  #     condition: variables['has-drift']
  #     displayName: Post - Has Drift
  #     inputs:
  #       gitHubConnection: ${{ variables['github-connection-name'] }}
  #       repositoryName: $(github-repo-name)
  #       comment: |
  #         ### ‚ö†Ô∏è &nbsp;Configuration Drift Detected

  #         Approving this Pull Request may result in destructive changes to your Azure resources. Please review the `terraform plan` output diff at Azure Pipelines Build Result Page.

  #         Proceed with caution!
